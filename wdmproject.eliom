(* This file was generated by Eliom-base-app.
   Feel free to use it, modify it, and redistribute it as you wish. *)

{shared{
open Eliom_content.Html5
open Eliom_content.Html5.F
open Lwt
}}

open Defs

type settings = {
  lieu: query_lieu list;
}

let default_settings = { lieu = [Ville "toulouse"] }

type user_data = {
  settings: settings;
  selected_concerts: concert list;
  library: music_library;
}

let db = Ocsipersist.open_table Wdmproject_config.db_name

let get_user_data userid =
  let userid = Int64.to_string userid in
  Lwt.catch
    (fun () -> Ocsipersist.find db userid)
    (fun _ ->
       let data = {
         settings = default_settings;
         selected_concerts = [];
         library = create_library ();
       } in
       Ocsipersist.add db userid data >>= fun () ->
       Lwt.return data)

let set_user_data userid data =
  Ocsipersist.add db (Int64.to_string userid) data

let concerts_event_h = Hashtbl.create 37
let concerts_event userid =
  try Hashtbl.find concerts_event_h userid with
    Not_found ->
    let e, send_e = React.E.create () in
    let e = Eliom_react.Down.of_react e in
    Hashtbl.add concerts_event_h userid (e, send_e);
    e, send_e

(* meh *)
let concerts_to_client : concert list -> (string * (string * string) * string) list =
  List.map (fun {artiste; lieu; date} ->
    (artiste,
     lieu,
     CalendarLib.Printer.Calendar.to_string date))

let update_concerts userid =
  lwt user_data = get_user_data userid in
  lwt l = Lwt_list.map_p (fun lieu -> InfoConcert.get ~lieu ())
    user_data.settings.lieu in
  lwt concerts = List.flatten l
    |> List.sort_uniq (fun c1 c2 ->
      let res = CalendarLib.Calendar.compare c1.date c2.date in
      if res <> 0 then res
      else compare c1 c2)
    |> Lwt_list.map_p (fun concert ->
      lwt tags = Freebase.search_artist_tags concert.artiste in
      let genres = genres_of_taglist tags in
      let ((matching_artist, score), global_score) =
        Core.rank genres user_data.library in

      {
        artiste = Printf.sprintf "%s - (%s, %f) / %f"
            concert.artiste matching_artist score global_score;
        lieu = concert.lieu;
        date = concert.date
      } |> Lwt.return) in
  let _, send_e = concerts_event userid in
  send_e (concerts_to_client concerts);
  set_user_data userid {user_data with selected_concerts = concerts}

{shared{
  type update_concerts_rpc = (int64) deriving(Json)
 }}

{client{
   let build_concerts_table btn concerts =
     let alternate =
       let switch = ref true in
       fun (artiste, lieu, date) ->
         switch := not (!switch);
         let lieu = Printf.sprintf "%s (%s)" (fst lieu) (snd lieu) in
         div
           ~a:[a_id (if (!switch) then "concert_odd" else "concert_even")]
           [h2 [pcdata artiste];
            p [pcdata ("le " ^ date ^ " Ã  " ^ lieu)]]
     in
     concerts
     |> List.map alternate
     |> (fun l ->
       div [
         btn;
         table (List.map (fun elt -> tr [td [elt]]) l);
        ])

   let update_concerts_rpc = %(server_function Json.t<update_concerts_rpc> update_concerts)
   let update_concerts userid _ =
     Lwt.async (fun () ->
       update_concerts_rpc userid
     )
 }}

let main_service_handler userid_o () () =
  Wdmproject_container.page userid_o (
    [
      p [em [pcdata "Eliom base app: Put app content here."]]
    ]
  )

let concert_handler userid_o () () =
  match userid_o with
  | None -> Wdmproject_container.page userid_o []
  | Some userid ->
    lwt user_data = get_user_data userid in
    let concerts_e, _ = concerts_event userid in
    let initial_concerts = user_data.selected_concerts
                           |> concerts_to_client in
        
    let btn = D.button ~button_type:`Button
        ~a:[a_onclick {{ update_concerts %userid }}]
        [pcdata "Update"] in

    Wdmproject_container.page userid_o [
      C.node {{ R.node (React.S.map (build_concerts_table %btn)
                          (%concerts_e |> React.S.hold %initial_concerts))
              }};
    ]

let parameter_handler userid_o () () =
  Wdmproject_container.page userid_o [
    div [
      h2 [pcdata "Local library"];
      p [
        pcdata "Import: ";
        raw_input ~input_type:`Text ~name:"import" ();
        raw_input ~input_type:`Submit ~value:"Ok" ()
      ]];
    div [
      h2 [pcdata "MPD server"];
      p [
        pcdata "Adress: ";
        raw_input ~input_type:`Text ~name:"adress" ();
        pcdata " Port: ";
        raw_input ~input_type:`Text ~name:"port" ();
        raw_input ~input_type:`Submit ~value:"Rescan" ()
      ]];
    div [
      h2 [pcdata "Facebook"];
      p [
        pcdata "Account: ";
        raw_input ~input_type:`Text ~name:"account" ();
        raw_input ~input_type:`Submit ~value:"Update" ()
      ]]
  ]  

let () =
  Wdmproject_base.App.register
    Eba_services.main_service
    (Wdmproject_page.Opt.connected_page main_service_handler);

  Wdmproject_base.App.register
    Wdmproject_services.concert_service
    (Wdmproject_page.Opt.connected_page concert_handler);

  Wdmproject_base.App.register
    Wdmproject_services.parameter_service
    (Wdmproject_page.Opt.connected_page parameter_handler)
